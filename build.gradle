import groovy.json.JsonGenerator
import groovy.json.JsonSlurper

plugins {
    id 'maven-publish'
    id 'fabric-loom' version '0.6-SNAPSHOT' apply false
}

def versionEnv = System.getenv("MOD_VERSION")
if (versionEnv == null || versionEnv.isBlank()) {
    versionEnv = "SNAPSHOT"
}

version = "${versionEnv}+${project.minecraft}"

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven { url "https://bai.jfrog.io/artifactory/maven" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft}"
        mappings "net.fabricmc:yarn:${rootProject.yarn}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric}"

        modApi "mcp.mobius.waila:wthit:fabric-${rootProject.wthit}"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    afterEvaluate {
        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }

            doLast {
                def json = new JsonGenerator.Options()
                    .disableUnicodeEscaping()
                    .build()
                fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
                    it.setText(json.toJson(new JsonSlurper().parse(it, "UTF-8")), "UTF-8")
                }
            }
        }

        tasks.withType(JavaCompile).configureEach {
            it.options.encoding = "UTF-8"
            def targetVersion = 8
            if (JavaVersion.current().isJava9Compatible()) {
                it.options.release = targetVersion
            } else {
                it.sourceCompatibility = JavaVersion.toVersion(targetVersion)
                it.targetCompatibility = JavaVersion.toVersion(targetVersion)
            }
        }

        java {
            withSourcesJar()
        }

        jar {
            from(rootProject.file("includes"))
        }
    }
}

subprojects {
    group = "${rootProject.group}.${rootProject.archivesBaseName}"
    archivesBaseName = name
    version = rootProject.version

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(jar) {
                        builtBy remapJar
                    }
                    artifact(remapJar) {
                        builtBy remapJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy remapJar
            }
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

subprojects.each {
    remapJar.dependsOn it.remapJar
}

dependencies {
    afterEvaluate {
        subprojects.each {
            implementation it
            include it
        }
    }
}
