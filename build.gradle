import groovy.json.JsonGenerator
import groovy.json.JsonSlurper

plugins {
    id 'maven-publish'
    id 'fabric-loom' version '0.10.+' apply false
    id "org.jetbrains.kotlin.jvm" version "1.5.32" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def versionEnv = System.getenv("MOD_VERSION")
if (versionEnv == null || versionEnv.isBlank()) {
    versionEnv = "SNAPSHOT"
}

version = versionEnv

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    buildDir = rootProject.file("build/${name}")

    configurations {
        implFor {
            resolutionStrategy {
                transitive false
            }
        }
    }

    loom {
        mixin {
            defaultRefmapName = "megane-${name}.refmap.json"
        }
    }

    repositories {
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://maven.bai.lol" }
        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        ivy {
            url rootProject.file("localdeps")
            metadataSources.artifact()
            patternLayout {
                artifact "[module]-[revision].[ext]"
            }
            content {
                includeGroup "localdeps"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft}"
        mappings "net.fabricmc:yarn:${rootProject.yarn}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader}"

        modApi "mcp.mobius.waila:wthit:fabric-${rootProject.wthit}"
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }

        doLast {
            def json = new JsonGenerator.Options()
                .disableUnicodeEscaping()
                .build()
            fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
                it.setText(json.toJson(new JsonSlurper().parse(it, "UTF-8")), "UTF-8")
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release.set(16)
    }

    java {
        withSourcesJar()
    }

    jar {
        from(rootProject.file("includes"))
    }
}

subprojects {
    group = "${rootProject.group}.${rootProject.archivesBaseName}"
    archivesBaseName = name
    version = rootProject.version

    sourceSets {
        main.java.srcDirs = ["../src/${name}/java"]
        main.resources.srcDirs = ["../src/${name}/resources"]
    }

    tasks.withType(org.gradle.jvm.tasks.Jar) {
        archiveBaseName.set("megane-${project.name}")
    }
}

sourceSets {
    testimpl {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

curseforge {
    if (System.getenv("CURSEFORGE_API") != null) {
        def changelogLink = "https://github.com/badasintended/megane/releases/tag/${versionEnv}"
        apiKey = System.getenv("CURSEFORGE_API")
        project {
            id = "408118"
            releaseType = "release"

            changelogType = "html"
            changelog = "<a href=\"${changelogLink}\">${changelogLink}</a>"

            mainArtifact(remapJar) {
                displayName = "[${project.minecraft}] v${project.version}"
            }

            addGameVersion "Fabric"
            addGameVersion project.minecraft

            relations {
                requiredDependency "wthit"
                project.curseforgeDeps.split(" ").each {
                    optionalDependency it
                }
            }

            afterEvaluate {
                uploadTask.dependsOn "build"
            }
        }
    }
}

subprojects.each {
    remapJar.dependsOn "${it.path}:remapJar"
}

dependencies {
    afterEvaluate {
        subprojects.each {
            implementation project(path: ":${it.path}", configuration: "namedElements")
            include it
        }
    }
}
