buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

plugins {
    id 'maven-publish'
    id 'fabric-loom' version '0.4-SNAPSHOT' apply false
}

version = project.mod

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven { url "https://maven.tehnut.info" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft}"
        mappings "net.fabricmc:yarn:${rootProject.yarn}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric}"

        modApi "mcp.mobius.waila:Hwyla:${rootProject.hwyla}"
        modApi "org.jetbrains:annotations:19.0.0"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    afterEvaluate {
        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }

        bintray {
            user = System.getenv("BINTRAY_USER")
            key = System.getenv("BINTRAY_KEY")
            publications = ["mavenJava"]
            publish = true
            pkg {
                repo = "fabric"
                name = project.name
                userOrg = "badasintended"
                licenses = ["MIT"]
                vcsUrl = "https://github.com/badasintended/megane.git"
                version {
                    name = project.version
                    released = new Date()
                    vcsUrl = "https://github.com/badasintended/megane.git"
                    gpg {
                        sign = true
                    }
                }
            }
        }
    }
}

subprojects {
    group = "${rootProject.group}.${rootProject.archivesBaseName}"
    archivesBaseName = name
    version = rootProject.version

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(jar) {
                        builtBy remapJar
                    }
                    artifact(remapJar) {
                        builtBy remapJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy remapJar
            }
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
    afterEvaluate {
        subprojects.each {
            compile it
            include it
        }
    }
}
